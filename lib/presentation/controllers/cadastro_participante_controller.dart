import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:get/get.dart';
import 'package:intl/intl.dart';
import '../../data/datasource/modulo_local_datasource.dart';
import '../../data/datasource/avaliacao_local_datasource.dart';
import '../../domain/entities/modulo_entity.dart';
import '../../domain/entities/participante_entity.dart';
import '../../domain/repositories/participante_repository.dart';
import '../../utils/enums/modulo_enums.dart';
import '../../utils/enums/idioma_enums.dart';
import '../../utils/enums/pessoa_enums.dart';
import '../../domain/entities/avaliacao_entity.dart';



class CadastroParticipanteController extends GetxController {
  final ParticipanteRepository _repository;

  CadastroParticipanteController(this._repository);

  final nomeCompletoController = TextEditingController();
  final dataNascimentoController = TextEditingController();

  final selectedSexo = Rx<Sexo?>(null);
  final selectedEscolaridade = Rx<Escolaridade?>(null);
  final selectedDate = Rx<DateTime?>(null);
  final selectedLateralidade = Rx<Lateralidade?>(null);
  final selectedIdioma = Rx<Idioma?>(null);

  void selectDate(BuildContext context) async {
    DateTime? pickedDate = await showDatePicker(
      context: context,
      initialDate: selectedDate.value ?? DateTime.now(),
      firstDate: DateTime(1900),
      lastDate: DateTime.now(),
    );

    if (pickedDate != null && pickedDate != selectedDate.value) {
      selectedDate.value = pickedDate;
      dataNascimentoController.text = DateFormat.yMd().format(pickedDate);
    }
  }

  Future<int?> createParticipante(int avaliadorID, List<String> selectedAtividades) async {
    var nomeCompleto = nomeCompletoController.text;
    List<String> parts = nomeCompleto.split(' ');

    var nome = parts.first;
    var sobrenome = parts.skip(1).join(' ');

    DateTime? parsedDate =
    DateFormat('yyyy-MM-dd').parse(dataNascimentoController.text);

    ParticipanteEntity novoParticipante = ParticipanteEntity(
      nome: nome,
      sobrenome: sobrenome,
      dataNascimento: parsedDate!,
      sexo: selectedSexo.value!,
      escolaridade: selectedEscolaridade.value!,
    );

    // Assuming that createParticipante returns the ID of the newly created Participante
    int? newParticipanteId = await _repository.createParticipante(novoParticipante);

    if (newParticipanteId != null) {
      // Create the avaliacao entity
      AvaliacaoEntity novaAvaliacao = AvaliacaoEntity(
        avaliacaoID: null, // This will be auto-generated by the database.
        avaliadorID: avaliadorID, // Use the passed avaliadorID here.
        participanteID: newParticipanteId,
        modulos: [], // Convert the selected modulos from the form to a list of AtividadeEntity.
      );

      // Create an instance of AvaliacaoLocalDataSource
      AvaliacaoLocalDataSource avaliacaoDataSource = AvaliacaoLocalDataSource();

      // Save the avaliacao entity to the database and get the ID
      int? newAvaliacaoId = await avaliacaoDataSource.create(novaAvaliacao);

      if (newAvaliacaoId != null) {
        // Create the AtividadeEntity objects
        List<ModuloEntity> modulos = createAtividadesEntities(selectedAtividades, newAvaliacaoId);

        // Save the AtividadeEntity objects to the database
        AtividadeLocalDataSource moduloDataSource = AtividadeLocalDataSource();
        for (ModuloEntity modulo in modulos) {
          await moduloDataSource.create(modulo);
        }

        // Return the newAvaliacaoId for further use if needed.
        return newAvaliacaoId;
      }

    }

    // Return null if the Participante or Avaliacao creation failed.
    return null;
  }


  Future<ParticipanteEntity?> getParticipant(int id) async {
    return _repository.getParticipante(id);
  }

  Future<List<ParticipanteEntity>?> getAllParticipantes() async {
    return _repository.getAllParticipantes();
  }

  List<ModuloEntity> createAtividadesEntities(List<String> selectedActivities, int evaluationID) {
    return selectedActivities.map((activity) {
      return ModuloEntity(
        date: DateTime.now(),
        score: 0,
        evaluationID: evaluationID,
        status: Status.a_iniciar,
      );
    }).toList();
  }


  @override
  void onClose() {
    nomeCompletoController.dispose();
    dataNascimentoController.dispose();
    super.onClose();
  }

  void printFormData() {
    print('Nome Completo: ${nomeCompletoController.text}');
    print('Data de Nascimento: ${dataNascimentoController.text}');
    print('Sexo: ${selectedSexo.value == Sexo.homem ? 'Homem' : (selectedSexo.value == Sexo.mulher ? 'Mulher' : 'Not Selected')}');
    print('Escolaridade: ${selectedEscolaridade.value?.toString().split('.').last ?? 'Not Selected'}');
    print('Date: ${selectedDate.value?.toIso8601String() ?? 'Not Selected'}');
    print('Lateralidade: ${selectedLateralidade.value?.toString().split('.').last ?? 'Not Selected'}');
    print('Idioma: ${selectedIdioma.value?.toString().split('.').last ?? 'Not Selected'}');
  }
}
